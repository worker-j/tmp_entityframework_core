// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SampleEntityFrameworkCore.Model;

#nullable disable

namespace SampleEntityFrameworkCore.Migrations
{
    [DbContext(typeof(BooksDbContext))]
    [Migration("20241015020315_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SampleEntityFrameworkCore.Model.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Author");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthday = new DateTime(1941, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            Name = "제임스 P. 호건"
                        },
                        new
                        {
                            Id = 2,
                            Birthday = new DateTime(1866, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            Name = "허버트 조지 웰즈"
                        });
                });

            modelBuilder.Entity("SampleEntityFrameworkCore.Model.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("PublishedYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            PublishedYear = 1977,
                            Title = "별의 계승자"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            PublishedYear = 1895,
                            Title = "타임머신"
                        });
                });

            modelBuilder.Entity("SampleEntityFrameworkCore.Model.Book", b =>
                {
                    b.HasOne("SampleEntityFrameworkCore.Model.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("SampleEntityFrameworkCore.Model.Author", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
